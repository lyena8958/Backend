/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-09-05 13:25:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.courier_002dv1_0_0.public_;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import model.Ordermember.*;
import model.review.*;

public final class control_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("model.review");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("model.Ordermember");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"errorPage.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('	');
      out.write('\n');

	request.setCharacterEncoding("UTF-8");
	response.setCharacterEncoding("UTF-8");

      out.write('\n');
      out.write('\n');
      model.Ordermember.OrderMemberDAO ordermemberDAO = null;
      ordermemberDAO = (model.Ordermember.OrderMemberDAO) _jspx_page_context.getAttribute("ordermemberDAO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (ordermemberDAO == null){
        ordermemberDAO = new model.Ordermember.OrderMemberDAO();
        _jspx_page_context.setAttribute("ordermemberDAO", ordermemberDAO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      model.review.ReviewDAO reviewDAO = null;
      reviewDAO = (model.review.ReviewDAO) _jspx_page_context.getAttribute("reviewDAO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (reviewDAO == null){
        reviewDAO = new model.review.ReviewDAO();
        _jspx_page_context.setAttribute("reviewDAO", reviewDAO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      out.write('\n');
      model.Ordermember.OrderMemberVO ordermemberVO = null;
      synchronized (session) {
        ordermemberVO = (model.Ordermember.OrderMemberVO) _jspx_page_context.getAttribute("ordermemberVO", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (ordermemberVO == null){
          ordermemberVO = new model.Ordermember.OrderMemberVO();
          _jspx_page_context.setAttribute("ordermemberVO", ordermemberVO, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("ordermemberVO"), request);
      out.write('\n');
      out.write('\n');
      model.review.ReviewVO reviewVO = null;
      reviewVO = (model.review.ReviewVO) _jspx_page_context.getAttribute("reviewVO", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (reviewVO == null){
        reviewVO = new model.review.ReviewVO();
        _jspx_page_context.setAttribute("reviewVO", reviewVO, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("reviewVO"), request);
      out.write('\n');
      out.write('\n');
     
	String action = request.getParameter("action");

	// 리뷰 메인페이지 이동(list)
	if(action.equals("list")){
		// 전체 리뷰
		// 리뷰 목록을 주기위해 datas 파라미터 전송~
		ArrayList<ReviewVO> datas = reviewDAO.RVSelectAll();
		request.setAttribute("datas", datas); 	
		pageContext.forward("lists_review.jsp");
	}
	// 회원가입 데이터 생성
	if(action.equals("signup")){
		session.invalidate();
		boolean signup = ordermemberDAO.memInsert(ordermemberVO);
		request.setAttribute("signup", signup);
		pageContext.forward("signupApply.jsp");	
		
	}
	//login.jsp에서 받아옴
	// 로그인이 완료되면 선택된 모드에 따라 페이지 이동 
	if(action.equals("loginCheck")){// 로그인 성공
		if(ordermemberDAO.loginCheck(ordermemberVO)){
			// 소비자or점주 사용자가 선택한 모드를 가져옴
	 		String mod = request.getParameter("mod");

	 			// 사용자 계정 저장 - (세션단위)
				// userID로 모든 속성의 데이터를 받아옴
				ordermemberVO = ordermemberDAO.memSelectOne(ordermemberVO);	 			
				session.setAttribute("ordermemberVO", ordermemberVO);//set->set..?

	 			if(mod.equals("소비자")){	 				
	 				// 메인 페이지 이동
	 				response.sendRedirect("control.jsp?action=list");	
	 			}
	 			else if(mod.equals("점주")){
	 				pageContext.forward("admin.jsp");
	 			}
	 		
		}
		// 로그인 실패
		else{
 		out.println("<script>alert('로그인에 실패하였습니다.'); history.go(-1); </script>");
 		}
	}
	
	// 로그아웃
	if(action.equals("logout")){
		session.invalidate();
		response.setContentType("UTF-8");
		pageContext.forward("index.jsp");
	}
	
	// lists_review -> 리뷰작성 클릭 -> insert_review.jsp에서 작성 -> 파리미터값이 옴
	if(action.equals("insert")){
		if(reviewDAO.RVInsert(reviewVO)){
			response.setCharacterEncoding("UTF-8");
			response.sendRedirect("control.jsp?action=list");	
		}
		else{
			System.out.println("DB 게시판 insert");
			throw new Exception("DB 게시판 insert 오류 발생!"); 
		}
	}
	
	// lists_review -> 내 리뷰보기 클릭하면
	if(action.equals("userreview")){
		// 사용자 리뷰
		ReviewVO vo = new ReviewVO();
		System.out.println("★"+vo);
		vo.setOnum(ordermemberVO.getOnum());
		
		// onum으로 고객의 글정보를 모두 불러옴
		ArrayList<ReviewVO> userReviews = reviewDAO.RVUserDatas(vo);
		request.setAttribute("userReviews", userReviews);
		
		pageContext.forward("user_view.jsp");
	}
	
	// user_review -> 내게시물에 타이틀을 클릭하면
	if(action.equals("editreview")){
		ReviewVO data = new ReviewVO();
		data.setRnum(Integer.parseInt(request.getParameter("rnum")));
		System.out.println(data);
		// vo재활용하여 해당 게시물의 정보가져오기 
		data = reviewDAO.RVSelectOne(data);
		request.setAttribute("data", data);
		
		pageContext.forward("edit_review.jsp");
	}
	
	if(action.equals("update")){
		//System.out.println("update 방문하셨당");
		// 정상반영 : true
		if(reviewDAO.RVUpdate(reviewVO)){
			System.out.println("update완료");
			out.println("<script>alert('정상적으로 수정이 완료되었습니다.');");
			
			response.sendRedirect("control.jsp?action=list");			
		}
		//미반영 : false
		else{
			System.out.println("update실패");
			throw new Exception("DB update 오류 발생!"); 
		}
	}
	
	if(action.equals("delete")){
		System.out.println(reviewVO);
		if(reviewDAO.RVDelete(reviewVO)){			
			pageContext.forward("deleteApply.jsp");	
		}
		else{
			throw new Exception("DB 삭제 오류 발생!"); 
		}
		
		
	}
	//검색기능
	if(action.equals("search")){
		//검색 내용을 가져옴
		String search =	request.getParameter("search");
		request.setAttribute("search", search);
		System.out.println("search"+" "+search);
		
		// dao를 활용하여 검색기록을 list로 받음
		ArrayList<ReviewVO> searchDatas = reviewDAO.RVSearch(search);
		request.setAttribute("searchDatas", searchDatas); // request로 속성설정
		
		pageContext.forward("search_List.jsp");
		
	}



    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
