  - IoC 제어의 역행 Inversion of Control   (객체간의 결합을 컨테이너가 처리)
      객체간의 (관계)결합을 누가 관리했을까?? : 개발자 -> 높은 결합도
       "낮은 결합도" 유지를 위해 → 컨테이너가(스프링) 대신 처리하게함!  
		의존관계 관리? 의존관계를 변경해야할 때,
		자바코드를 수정  ex) DAO의 메서드 인자를 VO로 사용
		--> IoC를 적용되면 컨테이너가 객체를 생성하므로, 
		자바코드가 변경 안해도 된다.


● IoC 컨테이너 
톰캣도 컨테이너를 사용하기때문에 이를 통해 유추해보자!
  - 서블릿은 자바로 구성된 클래스
    이때 클래스는 객체화 == 인스턴스화 해야 사용이 가능하다.

  1. 서블릿 객체를 누가 만들어줬을까?
  2. doGet() 메서드를 어떻게 호출함..??  Servlet s = new Servlet();  s.doGet();이렇게 하지 않았음..!!
  => Servlet Container    (주체가 컨테이너였다.)
	서블릿 클래스 제작, web.xml 설정파일 작성 == 서블릿 컨테이너에게 알려준 것
  서블릿을 어떻게 사용할지 web.xml로 설정을했는데 이는 서블릿 컨테이너에게 알려주었던 것이다.

	1) web.xml 설정파일들을 loading(적재) 
	2) Servlet Container 준비
	3) 클라이언트 -- /*.do GET---> "서블릿컨테이너"
	4) 설정파일을 보고, 매핑된 서블릿 클래스를 찾아서 ①객체를 생성
	5) ②doGet() 메서드를 호출 (객체가 있으니까, 호출이 되는 것), 결과 다시 전송(응답 response)



