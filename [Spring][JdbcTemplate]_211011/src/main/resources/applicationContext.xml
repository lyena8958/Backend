<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan base-package="model"></context:component-scan>
	<context:component-scan base-package="com.lee.app"></context:component-scan>
		
	
	<!-- DataSource 적용해보자                                                                                                 destroy-method : 자원반납 -->
	<!-- id는 권장사항 이지만 dataSource로 작성하는 것이 좋다.  -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
		<property name="username" value="kim"></property>
		<property name="password" value="8958"></property>
	</bean>
	
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
	<!-- 이로써 횡단관심을 변경할 때 POJO를 건드리지않고 아래 설정에서만 변경이 가능하여, -->
	<!-- 유지보수성이 향상된다. (높은 응집도) -->
	
	
	<!-- bean이 아닌 어노테이션을 사용해보자! -->
<!-- 	<bean class="com.lee.app.common.LogAdvice" id="log"/>
	<bean class="com.lee.app.common.AfterAdvice" id="aAdvice"/>
	<bean class="com.lee.app.common.AfterReturningAdvice" id="arAdvice"/>
	<bean class="com.lee.app.common.AfterThrowingAdvice" id="atAdvice"/>
	<bean class="com.lee.app.common.AroundAdvice" id="aroundAdvice"/> -->
	
	
	<!-- 어노테이션 -->
	<!-- ②그러기 위해선 설정이 필요하다. component scan처럼 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>


	<!-- ①어드바이스 클래스에 다이렉트로 어노테이션을 넣을 예정 -->
	<!-- 어드바이스에 포인트 컷을 어노테이션으로 정의함에 따라 필요가 없어짐 -->	
<!-- 	<aop:config>
		<aop:pointcut expression="execution(* model.board.*Impl.get*(..))" id="aPointcut"/>
		<aop:pointcut expression="execution(* model.board.*Impl.*(..))" id="bPointcut"/>
	</aop:config> -->
	
<!-- 	<aop:config>
		<aop:aspect ref="arAdvice">
			<aop:after-returning method="printLog" pointcut-ref="cPointcut"/> 
		</aop:aspect>
	</aop:config> -->




<!-- 	<aop:config>		
		<aop:pointcut expression="execution(* model.board.*Impl.get*(..))" id="aPointcut"/>
		<aop:pointcut expression="execution(* model.board.*Impl.*(..))" id="bPointcut"/>
		<aop:pointcut expression="" id="cPointcut"/>
		 -->		
		<!-- after 
		<aop:aspect ref="aAdvice">
			<aop:after method="printLog" pointcut-ref="bPointcut"/>
		</aop:aspect>-->
		
		<!-- after-returning	
		<aop:aspect ref="arAdvice">
			<aop:after-returning method="printLog" 
			
			pointcut-ref="aPointcut"/>
		</aop:aspect>	--> 
		
		<!-- after-throwing
		<aop:aspect ref="atAdvice">
			<aop:after-throwing method="printLog" pointcut-ref="bPointcut"/>
		</aop:aspect> 		--> 		
			
			
			
			
			
		<!-- around 
		<aop:aspect ref="aroundAdvice"> 
			<aop:around method="printLog" pointcut-ref="bPointcut"/>
		</aop:aspect> -->	
		

		<!-- returning은 오브젝트에 대한 변수명을 기재하는 것이다. (다른 클래스타입은불가 > Object만 -->
		<!-- Object ? = new Object(); 이며, ?를 정의 -->
		<!-- after-returning2 	
		<aop:aspect ref="arAdvice"> 										
			<aop:after-returning method="printLog" pointcut-ref="cPointcut" returning="obj"/> 
		</aop:aspect>  -->
		
		<!-- throwing 인셉션에 대한 변수명을 기재하는 것이다. (다른 클래스타입은불가 > Exception만 -->
		<!-- Exception ? = new Exception(); 이며, ?를 정의 -->
		<!-- after-throwing2 	
		<aop:aspect ref="atAdvice"> 										
			<aop:after-throwing method="printLog" pointcut-ref="bPointcut" throwing="excep"/> 
		</aop:aspect> -->
		
		<!-- around2 -->	
<!-- 		<aop:aspect ref="aroundAdvice"> 
			<aop:around method="printLog" pointcut-ref="bPointcut"/>
		</aop:aspect>  
		
	</aop:config> -->
</beans>
